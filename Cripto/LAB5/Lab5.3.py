import random
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes

def generate_private_key():
    return random.randint(1, 2047)

p = 3231700607131100730015351347782516336248805713348907517458843413926
980683413621000279205636264016468545855635793533081692882902308057347
262527355474246124574102620252791657297286270630032526342821314576693
141422365422094111134862999165747826803423055308634905063555771221918
789033272956969612974385624174123623722519734640269185579776797682301
462539793305801522685873076119753243646747585546071504384994817760854
203574478333763802008979513926973263183874299614206411543686974463865
222252980450000685711921570981354283278381836654739371799291235352592
243224854140186603293416961821903853465185891055642710892605645318224

g = 2

a = generate_private_key()
b = generate_private_key()

A = pow(g, a, p)
B = pow(g, b, p)


shared_secret_A = pow(B, a, p)
shared_secret_B = pow(A, b, p)

print(f"Общий секретный ключ Денис: {shared_secret_A}")
print(f"Общий секретный ключ Кристи: {shared_secret_B}")

shared_secret_key = shared_secret_A.to_bytes(32, byteorder='big')

print(f"Общий секретный ключ для AES: {shared_secret_key.hex()}")
